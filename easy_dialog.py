# -*- coding: utf-8 -*-
"""
/***************************************************************************
 easydemDialog
                                 A QGIS plugin
 Get Digital Elevation Model (DEM) data from Google Earth Engine and plot as raster layer it contour lines, make elevation maps.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-11-13
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Caio Arantes
        email                : caiosimplicioarantes@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic


# PyQt5 modules
from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QDialog

# QGIS modules
from qgis.core import QgsProject, QgsMapLayer

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'easy_dialog_base.ui'))


class easydemDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(easydemDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.dem_datasets = {
            "ASTER Global Digital Elevation Model (GDEM)": {
                "ID": "NASA/ASTER_GED/AG100_003",
                "Resolution": [30],
                "Coverage": "Global",
                "Description": "Elevation data generated from the ASTER instrument on NASA's Terra satellite, providing high-resolution global elevation data.",
                "Info": "<b>ASTER GDEM</b> <br>"
                        "<b>ID:</b> NASA/ASTER_GED/AG100_003 <br>"
                        "<b>Resolution:</b> 30 meters <br>"
                        "<b>Coverage:</b> Global <br>"
                        "Produced by NASA and Japan's METI using ASTER onboard Terra. Widely used in <i>hydrology, topography, and environmental studies</i>. "
                        "(<a href='https://lpdaac.usgs.gov/products/astgtmv003/'>Source</a>)"
            },
            "Copernicus Global Digital Elevation Model (GLO-30)": {
                "ID": "COPERNICUS/DEM/GLO30",
                "Resolution": [30],
                "Coverage": "Global",
                "Description": "Produced by the European Union's Copernicus program, providing global elevation data at 30-meter resolution.",
                "Info": "<b>Copernicus GLO-30</b> <br>"
                        "<b>ID:</b> COPERNICUS/DEM/GLO30 <br>"
                        "<b>Resolution:</b> 30 meters <br>"
                        "<b>Coverage:</b> Global <br>"
                        "Derived from optical stereo imagery, supporting applications in <i>environmental monitoring, land use planning, and climate impact studies</i>. "
                        "(<a href='https://spacedata.copernicus.eu/collections/elevation'>Source</a>)"
            },
            "JAXA ALOS Global Digital Surface Model (AW3D30)": {
                "ID": "JAXA/ALOS/AW3D30/V3_2",
                "Resolution": [30],
                "Coverage": "Global",
                "Description": "Surface model created by JAXA, derived from radar data collected by the ALOS satellite.",
                "Info": "<b>JAXA ALOS DSM (AW3D30)</b> <br>"
                        "<b>ID:</b> JAXA/ALOS/AW3D30/V3_2 <br>"
                        "<b>Resolution:</b> 30 meters <br>"
                        "<b>Coverage:</b> Global <br>"
                        "Developed by JAXA using data from the ALOS satellite, suitable for <i>disaster risk assessment and resource management</i>. "
                        "(<a href='https://www.eorc.jaxa.jp/ALOS/en/aw3d30/index.htm'>Source</a>)"
            },
            "GMTED2010 (Global Multi-resolution Terrain Elevation Data 2010)": {
                "ID": "USGS/GMTED2010",
                "Resolution": [250, 500, 1000],
                "Coverage": "Global",
                "Description": "Successor to GTOPO30, GMTED2010 offers improved elevation data at multiple resolutions.",
                "Info": "<b>GMTED2010</b> <br>"
                        "<b>ID:</b> USGS/GMTED2010 <br>"
                        "<b>Resolutions:</b> 250, 500, and 1000 meters <br>"
                        "<b>Coverage:</b> Global <br>"
                        "An update from GTOPO30 by the USGS and NGA, providing <i>multi-resolution elevation data</i> for regional to global scale analyses. "
                        "(<a href='https://topotools.cr.usgs.gov/gmted_viewer/viewer.htm'>Source</a>)"
            },
            "NASADEM": {
                "ID": "NASA/NASADEM_HGT",
                "Resolution": [30],
                "Coverage": "Global",
                "Description": "Refined version of SRTM data, updated by NASA to address inaccuracies in original SRTM measurements.",
                "Info": "<b>NASADEM</b> <br>"
                        "<b>ID:</b> NASA/NASADEM_HGT <br>"
                        "<b>Resolution:</b> 30 meters <br>"
                        "<b>Coverage:</b> Global <br>"
                        "Refined SRTM data with enhanced accuracy in specific regions. Suitable for <i>detailed topographic studies and high-resolution terrain analysis</i>. "
                        "(<a href='https://earthdata.nasa.gov/esds/competitive-programs/measures/nasadem'>Source</a>)"
            }
        }

        # Call update_dem_datasets after initialization to avoid accessing dem_datasets before it's defined.
        self.update_dem_datasets()
        self.load_vector_layers()
        self.dem_dataset_combobox.currentIndexChanged.connect(self.update_dem_info)
        self.select_output_folder_button.clicked.connect(self.select_output_folder)
        self.load_vector_layers_button.clicked.connect(self.load_vector_layers)
        self.vector_layer_combobox.currentIndexChanged.connect(self.get_selected_layer_path)

    def update_dem_datasets(self):
        print(list(self.dem_datasets.keys()))
        self.dem_dataset_combobox.addItems(list(self.dem_datasets.keys()))
        self.update_dem_info()

    def select_output_folder(self):
        folder = QtWidgets.QFileDialog.getExistingDirectory(self, "Select Output Folder")
        if folder:
            self.output_folder_lineedit.setText(folder)

    def load_vector_layers(self) -> None:
        layers = QgsProject.instance().mapLayers().values()
        self.vector_layer_combobox.clear()
        self.vector_layer_ids = {}
        
        for layer in layers:
            if layer.type() == QgsMapLayer.VectorLayer:
                layer_name = layer.name()
                print(f"Adding layer: {layer_name}")  # Debug: Show added layer names
                self.vector_layer_combobox.addItem(layer_name)
                self.vector_layer_ids[layer_name] = layer.id()
        
        # Debug: Show the layer dictionary after loading
        print(f"Loaded vector layers: {self.vector_layer_ids}")
        self.get_selected_layer_path()

    def get_selected_layer_path(self) -> str:
        layer_name = self.vector_layer_combobox.currentText()
        print(f"Selected layer name: {layer_name}")  # Debug: Show selected layer name
        
        layer_id = self.vector_layer_ids.get(layer_name)
        if not layer_id:
            print(f"Layer ID for '{layer_name}' not found in vector_layer_ids.")
            return None
        
        layer = QgsProject.instance().mapLayer(layer_id)
        if layer:
            print(f"Layer found: {layer.name()}, ID: {layer_id}")  # Debug: Confirm layer is found
            print(f"Layer data provider: {layer.dataProvider().dataSourceUri()}")
            
            if '.shp' in layer.dataProvider().dataSourceUri():
                self.selected_aio_layer_path = layer.dataProvider().dataSourceUri()
                #enable next
                return None
            else:
                print(f"Layer '{layer_name}' is not a shapefile.")
                return None

        else:
            print(f"Layer '{layer_name}' with ID '{layer_id}' not found in the project.")
            return None


    def update_dem_info(self):
        dem_name = self.dem_dataset_combobox.currentText()
        dem_info = self.dem_datasets[dem_name]["Info"]
        self.dem_info_textbox.setHtml(dem_info)
        self.dem_resolution_combobox.clear()
        self.dem_resolution_combobox.addItems([str(res) for res in self.dem_datasets[dem_name]["Resolution"]])

    
